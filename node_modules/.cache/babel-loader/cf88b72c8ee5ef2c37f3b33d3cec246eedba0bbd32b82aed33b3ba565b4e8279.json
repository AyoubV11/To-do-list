{"ast":null,"code":"var _jsxFileName = \"/home/ayoubinho/Web/jour2/liste-dynamique/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState } from 'react';\nimport PrintArticle from './Article';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tasks = [{\n  title: 'Apprendre React',\n  completed: true,\n  status: 1\n}, {\n  title: 'Créer un projet React',\n  completed: false,\n  status: 1\n}, {\n  title: 'Comprendre les props',\n  completed: true,\n  status: 199\n}, {\n  title: 'Déployer une application React',\n  completed: false,\n  status: 1\n}];\nfunction Task(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '10px',\n      padding: '10px',\n      border: '1px solid #ccc'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Titre : \", props.title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status : \", props.completed ? 'Terminée' : 'En cours']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_c = Task;\nfunction TaskList(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: props.tasks.map((task, index) => task.status === 1 ? /*#__PURE__*/_jsxDEV(Task, {\n      title: task.title,\n      completed: task.completed\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }, this) : null)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_c2 = TaskList;\nfunction AddList() {\n  _s();\n  //const [inputValue1, setInputValue1] = useState(''); // Pour stocker la valeur du premier input\n  //const [inputValue2, setInputValue2] = useState(''); // Pour stocker la valeur du deuxième input\n  //const [value, setValue] = useState(''); // Pour stocker la valeur du premier input après avoir appuyé sur \"Ajouter\"\n  //const [value2, setValue2] = useState(''); // Pour stocker la valeur du deuxième input après avoir appuyé sur \"Ajouter\"\n  //\n  //// Met à jour la valeur du premier champ d'entrée\n  //const handleInputChange1 = (event) => {\n  //  setInputValue1(event.target.value); \n  //};\n  //\n  //// Met à jour la valeur du deuxième champ d'entrée\n  //const handleInputChange2 = (event) => {\n  //  setInputValue2(event.target.value); \n  //};\n  //\n  //// Lorsque l'on clique sur \"Ajouter\", on stocke les valeurs des deux inputs dans `value` et `value2`\n  //const handleAddClick = () => {\n  //  setValue(inputValue1);\n  //  setValue2(inputValue2);\n  //  setInputValue1(''); // Réinitialise le premier champ d'entrée après l'ajout\n  //  setInputValue2(''); // Réinitialise le deuxième champ d'entrée après l'ajout\n  //};\n  //\n  //\n  //const Newtasks = { inputValue1,inputValue1,status: 1 };\n  //\n  //return (\n  //  <div>\n  //    <input \n  //      type=\"text\" \n  //      value={inputValue1} \n  //      onChange={handleInputChange1} \n  //      placeholder=\"Entrez le titre\"\n  //    />\n  //    <input \n  //      type=\"text\" \n  //      value={inputValue2} \n  //      onChange={handleInputChange2} \n  //      placeholder=\"Entrez l'avancement\"\n  //    />\n  //\n  //    <button onClick={handleAddClick}>Ajouter</button>\n  //\n  //    <p>La valeur du titre est : {value}</p>\n  //    <p>La valeur de l'avancement est : {value2}</p>\n  //  </div>\n  //\n  //\n  //\n  //\n  //  \n  //)\n\n  // État initial des tâches\n  const [tasks, setTasks] = useState([{\n    title: 'Apprendre React',\n    completed: true,\n    status: 1\n  }, {\n    title: 'Créer un projet React',\n    completed: false,\n    status: 1\n  }, {\n    title: 'Comprendre les props',\n    completed: true,\n    status: 199\n  }, {\n    title: 'Déployer une application React',\n    completed: false,\n    status: 1\n  }]);\n\n  // Nouvelle tâche à ajouter\n  const Newtasks = {\n    title: 'test1test',\n    completed: true,\n    status: 1\n  };\n\n  // Fonction pour ajouter une nouvelle tâche\n  const addNewTask = () => {\n    setTasks([...tasks, Newtasks]); // Ajoute la nouvelle tâche au tableau\n  };\n}\n_s(AddList, \"OZkpehsHHmEUdSYuPVcCc1QvjPQ=\");\n_c3 = AddList;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Liste des t\\xE2ches\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Task\");\n$RefreshReg$(_c2, \"TaskList\");\n$RefreshReg$(_c3, \"AddList\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["React","useState","PrintArticle","jsxDEV","_jsxDEV","tasks","title","completed","status","Task","props","style","margin","padding","border","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","TaskList","map","task","index","_c2","AddList","_s","setTasks","Newtasks","addNewTask","_c3","App","className","_c4","$RefreshReg$"],"sources":["/home/ayoubinho/Web/jour2/liste-dynamique/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport PrintArticle from './Article';\n\n\n\nconst tasks = [\n  { title: 'Apprendre React', completed: true ,status:1},\n  { title: 'Créer un projet React', completed: false ,status:1},\n  { title: 'Comprendre les props', completed: true ,status:199},\n  { title: 'Déployer une application React', completed: false,status:1 }\n];\n\n\n\nfunction Task(props) {\n  return (\n    <div style={{ margin: '10px', padding: '10px', border: '1px solid #ccc' }}>\n      <p>Titre : {props.title}</p>\n      <p>Status : {props.completed ? 'Terminée' : 'En cours'}</p>\n    </div>\n  );\n}\n\nfunction TaskList(props) {\n  return (\n    <div>\n      {props.tasks.map((task, index) => \n        task.status === 1 ? (\n          <Task key={index} title={task.title} completed={task.completed} />\n        ) : null\n      )}\n    </div>\n  );\n}\n\nfunction AddList(){\n  //const [inputValue1, setInputValue1] = useState(''); // Pour stocker la valeur du premier input\n  //const [inputValue2, setInputValue2] = useState(''); // Pour stocker la valeur du deuxième input\n  //const [value, setValue] = useState(''); // Pour stocker la valeur du premier input après avoir appuyé sur \"Ajouter\"\n  //const [value2, setValue2] = useState(''); // Pour stocker la valeur du deuxième input après avoir appuyé sur \"Ajouter\"\n//\n  //// Met à jour la valeur du premier champ d'entrée\n  //const handleInputChange1 = (event) => {\n  //  setInputValue1(event.target.value); \n  //};\n//\n  //// Met à jour la valeur du deuxième champ d'entrée\n  //const handleInputChange2 = (event) => {\n  //  setInputValue2(event.target.value); \n  //};\n//\n  //// Lorsque l'on clique sur \"Ajouter\", on stocke les valeurs des deux inputs dans `value` et `value2`\n  //const handleAddClick = () => {\n  //  setValue(inputValue1);\n  //  setValue2(inputValue2);\n  //  setInputValue1(''); // Réinitialise le premier champ d'entrée après l'ajout\n  //  setInputValue2(''); // Réinitialise le deuxième champ d'entrée après l'ajout\n  //};\n  //\n//\n  //const Newtasks = { inputValue1,inputValue1,status: 1 };\n//\n  //return (\n  //  <div>\n  //    <input \n  //      type=\"text\" \n  //      value={inputValue1} \n  //      onChange={handleInputChange1} \n  //      placeholder=\"Entrez le titre\"\n  //    />\n  //    <input \n  //      type=\"text\" \n  //      value={inputValue2} \n  //      onChange={handleInputChange2} \n  //      placeholder=\"Entrez l'avancement\"\n  //    />\n//\n  //    <button onClick={handleAddClick}>Ajouter</button>\n//\n  //    <p>La valeur du titre est : {value}</p>\n  //    <p>La valeur de l'avancement est : {value2}</p>\n  //  </div>\n//\n//\n//\n//\n  //  \n  //)\n\n  // État initial des tâches\n  const [tasks, setTasks] = useState([\n    { title: 'Apprendre React', completed: true, status: 1 },\n    { title: 'Créer un projet React', completed: false, status: 1 },\n    { title: 'Comprendre les props', completed: true, status: 199 },\n    { title: 'Déployer une application React', completed: false, status: 1 }\n  ]);\n\n  // Nouvelle tâche à ajouter\n  const Newtasks = { title: 'test1test', completed: true, status: 1 };\n\n  // Fonction pour ajouter une nouvelle tâche\n  const addNewTask = () => {\n    setTasks([...tasks, Newtasks]); // Ajoute la nouvelle tâche au tableau\n\n   };\n\n\n\n   \n\n}\n\n\n\n\n\n\n\n\n\n\nfunction App() {\n  \n  \n  return (\n    <div className=\"App\">\n      <h1>Liste des tâches</h1>\n      <TaskList tasks={tasks} />\n      <AddList />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}